(()=>{const t=(t,e,o)=>({title:t,description:e,addToDo:o}),e=(t,e,o,n,c)=>({title:t,description:e,dueDate:o,priority:n,checked:c}),o=t=>{const e=document.querySelector(".right-part"),o=document.createElement("div");e.appendChild(o),o.classList.add("project-container");const n=document.createElement("input");o.appendChild(n),n.type="text",n.classList.add("project-title"),n.classList.add("title-input"+t),n.value="New Title";const c=document.createElement("textarea");o.appendChild(c),c.type="text",c.classList.add("project-desc"),c.classList.add("desc-input"+t),c.value="Description...";const d=document.createElement("div");o.appendChild(d),d.classList.add("todos-container");const i=document.createElement("button");o.appendChild(i),i.classList.add("submit-button"),i.classList.add("submit-project-button"+t),i.textContent="Submit Details";const s=document.createElement("button");return o.appendChild(s),s.type="button",s.classList.add("submit-todo"),s.classList.add("submit-todo-button"+t),s.textContent="+",{titleInput:n,descriptionInput:c,submitToDo:s,submitProject:i}},n=(t,e)=>{const o=document.querySelector(".todos-container"),n=document.createElement("div");n.classList.add("todo-container"),n.classList.add("todo-container"+e),o.appendChild(n);const c=document.createElement("div");c.classList.add("basic-elements-container"),n.appendChild(c);const d=document.createElement("button");d.classList.add("delete-button"),d.classList.add("delete-button"+e),d.textContent="x",c.appendChild(d);const i=document.createElement("input");c.appendChild(i),i.value="New to-do",i.type="text",i.classList.add("todo-title"+e),i.classList.add("expand-todo");const s=document.createElement("input");c.appendChild(s),s.type="checkbox",s.classList.add("checkbox"+e),s.classList.add("checkbox"+t);const l=document.createElement("input");n.appendChild(l),l.type="text",l.classList.add("todo-desc"+e),l.classList.add("todo-description"),l.value="Description...";const a=document.createElement("input");n.appendChild(a),a.type="date",a.classList.add("todo-date"+e),a.classList.add("todo-date");const u=document.createElement("select");n.appendChild(u),u.classList.add("todo-priority"+e),u.classList.add("todo-priority");const r=document.createElement("option");r.value="High",r.textContent="High",u.appendChild(r);const p=document.createElement("option");p.value="Medium",p.textContent="Medium",u.appendChild(p);const m=document.createElement("option");return m.value="Low",m.textContent="Low",u.appendChild(m),{toDoTitle:i}},c=((()=>{const e=[],n=[],d=document.querySelector(".new-project"),i=()=>{const o=e[e.length-1],c=o.titleInput.value,d=o.descriptionInput.value,i=o.submitToDo.value;n.push(t(c,d,i))},s=()=>{document.querySelector(".project-container").remove()},l=()=>{null!=document.querySelector(".project-container")&&s()},a=t=>{l(),(t=>{const e=n[t];o(t),document.querySelector(".title-input"+t).value=e.title,document.querySelector(".desc-input"+t).value=e.description})(t),c.returnToDoDOM(t).genToDoElements(),document.querySelector(".submit-project-button"+t).addEventListener("click",(t=>{(t=>{const e=t.target.classList[1].slice(-1),o=n[e];o.title=document.querySelector(".title-input"+e).value,o.description=document.querySelector(".desc-input"+e).value,((t,e)=>{document.querySelector(".number"+t).textContent=e})(e,o.title),s()})(t)}))},u=t=>{(()=>{const t=document.querySelector(".tab-container"),o=document.createElement("button");o.classList.add("project-tab","number"+parseInt(e.length-1)),t.appendChild(o),o.textContent=n[n.length-1].title,s()})();const o=t.target.classList[1].slice(-1);document.querySelector(".number"+o).addEventListener("click",(()=>{a(o)}))};d.addEventListener("click",(()=>{l(),e.push(o(e.length)),c.newToDo(),e[e.length-1].submitProject.addEventListener("click",i),e[e.length-1].submitProject.addEventListener("click",u)}))})(),(()=>{const t=[],o=[];return{newToDo:()=>{const c=[];let s=[];const l=document.querySelector(".submit-button");document.querySelector(".submit-todo").addEventListener("click",(t=>{(t=>{const e=t.target.classList[1].slice(-1),o=c.length;c.push(n(e,o)),d.expandToDoLogic(o)})(t)})),l.addEventListener("click",(()=>{for(i=0;i<c.length;i++)toDoTitleValue=c[i].toDoTitle.value,console.log(c[i]),s.push(e(toDoTitleValue))})),l.addEventListener("click",(()=>{t.push(c)})),l.addEventListener("click",(()=>{o.push(s)}))},returnToDoDOM:c=>{const s=t[c].length,l=document.querySelector(".submit-button");document.querySelector(".submit-todo").className="old-submit-todo";const a=document.querySelector(".old-submit-todo"),u=()=>{const e=t[c].length;for(i=0;i<e;i++)d.expandToDoLogic(i)};return a.addEventListener("click",(()=>{t[c].push(n(c,i))})),a.addEventListener("click",u),l.addEventListener("click",(()=>{const n=t[c].length;for(i=0;i<n;i++)toDoTitleValue=document.querySelector(".todo-title"+i).value,toDoDescriptionValue=document.querySelector(".todo-desc"+i).value,console.log(toDoDescriptionValue),void 0===o[c][i]?o[c].push(e(toDoTitleValue,toDoDescriptionValue)):(o[c][i].title=toDoTitleValue,o[c][i].description=toDoDescriptionValue)})),{genToDoElements:()=>{for(i=0;i<s;i++)n(c,i),document.querySelector(".todo-title"+i).value=o[c][i].title;u()}}}}})()),d={expandToDoLogic:t=>{const e=document.querySelector(".todo-title"+t);e.addEventListener("click",(t=>{(t=>{const e=t.target.classList[0].slice(-1);document.querySelector(".expand-todo"+e),(t=>{const e=document.querySelector(".todo-desc"+t);e.style.width="80%",e.style.height="15px",e.style.padding="2px",e.style.border="1px solid black"})(e),(t=>{const e=document.querySelector(".todo-date"+t);e.style.width="80%",e.style.height="15px",e.style.padding="2px",e.style.border="1px solid black"})(e),(t=>{const e=document.querySelector(".todo-priority"+t);e.style.width="85%",e.style.height="22px",e.style.padding="2px",e.style.border="1px solid black"})(e),(t=>{document.querySelector(".todo-container"+t).style.gap="20px"})(e)})(t)}))}}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
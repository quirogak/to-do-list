(()=>{const t=(t,e,o)=>({title:t,description:e,addToDo:o}),e=(t,e,o,n,c)=>({title:t,description:e,dueDate:o,priority:n,checked:c}),o=t=>{const e=document.querySelector(".right-part"),o=document.createElement("div");e.appendChild(o),o.classList.add("project-container");const n=document.createElement("input");o.appendChild(n),n.type="text",n.classList.add("project-title"),n.classList.add("title-input"+t),n.value="New Title";const c=document.createElement("textarea");o.appendChild(c),c.type="text",c.classList.add("project-desc"),c.classList.add("desc-input"+t),c.value="Description...";const d=document.createElement("div");o.appendChild(d),d.classList.add("todos-container");const i=document.createElement("button");o.appendChild(i),i.classList.add("submit-button"),i.classList.add("submit-project-button"+t),i.textContent="Submit Details";const s=document.createElement("button");return o.appendChild(s),s.type="button",s.classList.add("submit-todo"),s.classList.add("submit-todo-button"+t),s.textContent="+",{titleInput:n,descriptionInput:c,submitToDo:s,submitProject:i}},n=(t,e)=>{const o=document.querySelector(".todos-container"),n=document.createElement("div");n.classList.add("todo-container"),n.classList.add("todo-container"+e),o.appendChild(n);const c=document.createElement("div");c.classList.add("basic-elements-container"+e),n.appendChild(c);const d=document.createElement("button");d.classList.add("delete-button"),d.classList.add("delete-button"+e),d.textContent="x",c.appendChild(d);const i=document.createElement("input");c.appendChild(i),i.value="New to-do",i.type="text",i.classList.add("todo-title"+e),i.classList.add("expand-todo");const s=document.createElement("input");return c.appendChild(s),s.type="checkbox",s.classList.add("checkbox"+e),s.classList.add("checkbox"+t),{toDoTitle:i}},c=t=>{const e=document.querySelector(".todo-container"+t),o=document.createElement("textarea");e.appendChild(o),o.type="text",o.classList.add("todo-desc"+t),o.value="Description...";const n=document.createElement("input");e.appendChild(n),n.type="date",n.classList.add("todo-date"+t);const c=document.createElement("select");e.appendChild(c),c.classList.add("todo-priority"+t);const d=document.createElement("option");d.value="High",d.textContent="High",c.appendChild(d);const i=document.createElement("option");i.value="Medium",i.textContent="Medium",c.appendChild(i);const s=document.createElement("option");s.value="Low",s.textContent="Low",c.appendChild(s)},d=((()=>{const e=[],n=[],c=document.querySelector(".new-project"),i=()=>{const o=e[e.length-1],c=o.titleInput.value,d=o.descriptionInput.value,i=o.submitToDo.value;n.push(t(c,d,i))},s=()=>{document.querySelector(".project-container").remove()},l=()=>{null!=document.querySelector(".project-container")&&s()},a=t=>{l(),(t=>{const e=n[t];o(t),document.querySelector(".title-input"+t).value=e.title,document.querySelector(".desc-input"+t).value=e.description})(t),d.returnToDoDOM(t).genToDoElements(),document.querySelector(".submit-project-button"+t).addEventListener("click",(t=>{(t=>{const e=t.target.classList[1].slice(-1),o=n[e];o.title=document.querySelector(".title-input"+e).value,o.description=document.querySelector(".desc-input"+e).value,((t,e)=>{document.querySelector(".number"+t).textContent=e})(e,o.title),s()})(t)}))},u=t=>{(()=>{const t=document.querySelector(".tab-container"),o=document.createElement("button");o.classList.add("project-tab","number"+parseInt(e.length-1)),t.appendChild(o),o.textContent=n[n.length-1].title,s()})();const o=t.target.classList[1].slice(-1);document.querySelector(".number"+o).addEventListener("click",(()=>{a(o)}))};c.addEventListener("click",(()=>{l(),e.push(o(e.length)),d.newToDo(),e[e.length-1].submitProject.addEventListener("click",i),e[e.length-1].submitProject.addEventListener("click",u)}))})(),(()=>{const t=[],o=[];return{newToDo:()=>{const c=[];let d=[];const l=document.querySelector(".submit-button");document.querySelector(".submit-todo").addEventListener("click",(t=>{(t=>{const e=t.target.classList[1].slice(-1),o=c.length;c.push(n(e,o)),s.expandToDoLogic(o)})(t)})),l.addEventListener("click",(()=>{for(i=0;i<c.length;i++)toDoTitleValue=c[i].toDoTitle.value,d.push(e(toDoTitleValue))})),l.addEventListener("click",(()=>{t.push(c)})),l.addEventListener("click",(()=>{o.push(d)}))},returnToDoDOM:c=>{const d=t[c].length,l=document.querySelector(".submit-button");document.querySelector(".submit-todo").className="old-submit-todo";const a=document.querySelector(".old-submit-todo"),u=()=>{const e=t[c].length;for(i=0;i<e;i++)s.expandToDoLogic(i)};return a.addEventListener("click",(()=>{t[c].push(n(c,i))})),a.addEventListener("click",u),l.addEventListener("click",(()=>{const n=t[c].length;for(i=0;i<n;i++)toDoTitleValue=document.querySelector(".todo-title"+i).value,void 0===o[c][i]?o[c].push(e(toDoTitleValue)):o[c][i].title=toDoTitleValue})),{genToDoElements:()=>{for(i=0;i<d;i++)n(c,i),document.querySelector(".todo-title"+i).value=o[c][i].title;u()}}}}})()),s={expandToDoLogic:t=>{document.querySelector(".todo-title"+t).addEventListener("click",(t=>{(t=>{const e=t.target.classList[0].slice(-1);document.querySelector(".expand-todo"+e),c(e)})(t)}))}}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,